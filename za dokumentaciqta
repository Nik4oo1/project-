ИНФОРМАЦИОННА СИСТЕМА ЗА БИБЛИОТЕЧЕН КАТАЛОГ
Техническа документация и теория

1. ТЕОРЕТИЧНА ЧАСТ
1.1. Въведение
Информационната система за библиотечен каталог е уеб-базирано приложение, предназначено за управление на книжния фонд и читателите в училищна библиотека. Системата позволява ефективно проследяване на наличните книги, регистрация на читатели и управление на процесите по заемане и връщане на книги.
1.2. Цели на системата

Автоматизация на библиотечните процеси
Централизирано съхранение на информация за книги и читатели
Опростяване на процеса по заемане и връщане на книги
Проследяване на статуса на всяка книга в реално време
Генериране на статистика за работата на библиотеката

1.3. Архитектура на системата
Системата е изградена по Single Page Application (SPA) модел с клиентска архитектура:
┌─────────────────────────────────────┐
│     Презентационен слой (HTML)     │
│    - Потребителски интерфейс        │
│    - Табове и форми                 │
└──────────────┬──────────────────────┘
               │
┌──────────────▼──────────────────────┐
│      Стилов слой (CSS)              │
│    - Визуална стилизация            │
│    - Responsive дизайн              │
└──────────────┬──────────────────────┘
               │
┌──────────────▼──────────────────────┐
│   Бизнес логика (JavaScript)        │
│    - Управление на данни            │
│    - Валидация                      │
│    - Обработка на събития           │
└──────────────┬──────────────────────┘
               │
┌──────────────▼──────────────────────┐
│     Слой за данни (Arrays)          │
│    - books[] - масив с книги        │
│    - readers[] - масив с читатели   │
└─────────────────────────────────────┘
1.4. Структура на данните
Обект "Книга" (Book)
javascript{
  id: string,           // Уникален идентификатор
  author: string,       // Име на автора
  title: string,        // Заглавие на книгата
  publisher: string,    // Издателство
  year: number,         // Година на издаване
  available: boolean,   // Статус (true = свободна)
  borrowedBy: string    // ID на читател (null = не е заета)
}
Обект "Читател" (Reader)
javascript{
  id: string,          // Уникален идентификатор
  firstName: string,   // Име
  lastName: string,    // Фамилия
  grade: number,       // Клас (1-12)
  class: string        // Паралелка (А, Б, В, и т.н.)
}

2. ФУНКЦИОНАЛНИ ВЪЗМОЖНОСТИ
2.1. Модул "Табло" (Dashboard)
Функционалности:

Визуализация на ключови статистики
Общ брой книги
Брой налични книги
Брой заети книги
Общ брой регистрирани читатели
Списък с последно заети книги

Технология: Динамично обновяване чрез JavaScript функцията updateDashboard()
2.2. Модул "Книги"
2.2.1. Добавяне на книги
Входни полета:

Идентификационен номер (задължително, уникално)
Автор (задължително)
Заглавие (задължително)
Издателство (задължително)
Година на издаване (задължително, 1800-2025)

Валидация:

Проверка за дублиращи се ID номера
Всички полета са задължителни
Годината трябва да е в валиден диапазон

2.2.2. Преглед на книги
Функции:

Табличен изглед на всички книги
Търсене по заглавие, автор или издателство
Визуален индикатор за статус (свободна/заета)
Информация за кой е заел книгата

2.2.3. Изтриване на книги

Директно изтриване от таблицата
Потвърждение преди изтриване

2.3. Модул "Читатели"
2.3.1. Регистрация на читатели
Входни полета:

Идентификационен номер (задължително, уникално)
Име (задължително)
Фамилия (задължително)
Клас (задължително, 1-12)
Паралелка (задължително, 1 буква)

Валидация:

Проверка за дублиращи се ID номера
Всички полета са задължителни
Класът трябва да е между 1 и 12
Паралелката се преобразува автоматично в главна буква

2.3.2. Преглед на читатели
Функции:

Табличен изглед на всички читатели
Търсене по име, фамилия или клас
Показване на броя заети книги за всеки читател

2.3.3. Изтриване на читатели

Защита срещу изтриване на читател със заети книги
Потвърждение преди изтриване

2.4. Модул "Заемане/Връщане"
2.4.1. Заемане на книга
Процес:

Избор на налична книга от падащо меню
Избор на читател
Система автоматично:

Маркира книгата като заета
Записва ID на читателя
Обновява всички изгледи



2.4.2. Връщане на книга
Процес:

Преглед на заетите книги
Бутон "Върни" при всяка книга
Система автоматично:

Маркира книгата като свободна
Изтрива връзката с читателя
Обновява всички изгледи




3. ТЕХНИЧЕСКИ СПЕЦИФИКАЦИИ
3.1. Използвани технологии
HTML5

Семантични тагове
Форми с валидация
Таблици за данни

CSS3

Flexbox и Grid Layout
Gradient backgrounds
Transitions и animations
Responsive дизайн
Custom форми и бутони

JavaScript (ES6+)

Event listeners
Array methods (filter, find, forEach)
DOM manipulation
Form handling
Local state management

3.2. Функции и методи
Основни функции:
javascript// Показване на табове
showTab(tabName)

// Визуализация на данни
displayBooks(filter)
displayReaders(filter)
displayBorrowedBooks()

// Обновяване на UI елементи
updateDashboard()
updateBorrowSelects()

// CRUD операции
deleteBook(bookId)
deleteReader(readerId)
returnBook(bookId)
3.3. Event Handlers
Form submissions:

bookForm.submit - Добавяне на книга
readerForm.submit - Добавяне на читател
borrowForm.submit - Заемане на книга

Search inputs:

searchBooks.input - Филтриране на книги
searchReaders.input - Филтриране на читатели


4. ПОТРЕБИТЕЛСКО РЪКОВОДСТВО
4.1. Начало на работа

Отворете системата в уеб браузър
Навигирайте между табовете чрез горното меню
Добавете читатели преди да заемате книги

4.2. Добавяне на книга

Отидете в таб "Книги"
Попълнете всички полета във формата
Кликнете "Добави книга"
Книгата се появява в таблицата долу

4.3. Регистрация на читател

Отидете в таб "Читатели"
Попълнете всички полета
Кликнете "Добави читател"
Читателят се появява в таблицата

4.4. Заемане на книга

Отидете в таб "Заемане/Връщане"
Изберете книга от падащото меню (само налични)
Изберете читател
Кликнете "Заеми книга"
Книгата се показва в таблицата с заети книги

4.5. Връщане на книга

Отидете в таб "Заемане/Връщане"
Намерете книгата в списъка със заети книги
Кликнете бутона "Върни"
Книгата отново става налична


5. ПРЕДИМСТВА НА СИСТЕМАТА
5.1. За библиотекари
✓ Бърз достъп до информация за книги
✓ Лесно проследяване на заети книги
✓ Автоматично генериране на статистика
✓ Интуитивен интерфейс без нужда от обучение
5.2. За училището
✓ Цифровизация на библиотечния процес
✓ Намаляване на административната работа
✓ Точна статистика за използване на книги
✓ Без нужда от сървърна инфраструктура
5.3. За учениците
✓ Бърза услуга при заемане/връщане
✓ Прозрачност на процеса
✓ Лесно проследяване на заетите книги

6. ОГРАНИЧЕНИЯ И БЪДЕЩО РАЗВИТИЕ
6.1. Текущи ограничения
⚠ Данните се съхраняват локално - при презареждане на страницата се губят
⚠ Няма многопотребителски достъп - работи само на едно устройство
⚠ Липсва система за дати - не се проследява кога е заета книгата
⚠ Няма история - не се пази минал запис на заеманията
6.2. Възможности за разширение
Фаза 2:

Интеграция с база данни (localStorage или IndexedDB)
Добавяне на дати за заемане и срок за връщане
Системи за напомняния за просрочени книги
Генериране на отчети (PDF/Excel)

Фаза 3:

Backend сървър (Node.js/PHP)
SQL база данни (MySQL/PostgreSQL)
Многопотребителски достъп
Система за права на достъп (admin/библиотекар)
Баркод скенер за книги

Фаза 4:

История на заеманията
Статистики за най-популярни книги
Резервация на книги
Email нотификации
Мобилно приложение


7. КОДОВА ОРГАНИЗАЦИЯ
7.1. Структура на HTML
<body>
  <div class="container">
    <header>        // Заглавие
    <div class="tabs">    // Навигация
    <div class="content">
      <div id="dashboard">  // Таб 1
      <div id="books">      // Таб 2
      <div id="readers">    // Таб 3
      <div id="borrow">     // Таб 4
    </div>
  </div>
  <script>        // JavaScript логика
</body>
7.2. CSS организация

Reset стилове - нулиране на стандартните стилове
Layout стилове - контейнери, grid, flexbox
Component стилове - бутони, форми, таблици
Utility стилове - цветове, анимации
Responsive стилове - адаптивност

7.3. JavaScript модули (концептуално)
Data Layer:
├── books[] array
└── readers[] array

Business Logic:
├── CRUD operations
├── Search & filter
└── Validation

UI Layer:
├── Display functions
├── Event handlers
└── State updates

8. БЕЗОПАСНОСТ И ВАЛИДАЦИЯ
8.1. Входна валидация
✓ Проверка за празни полета
✓ Проверка за уникалност на ID
✓ Проверка за валиден формат на данни
✓ Санитизация на входни данни
8.2. Бизнес логика валидация
✓ Не може да се заеме вече заета книга
✓ Не може да се изтрие читател със заети книги
✓ Всеки ID трябва да е уникален

9. ТЕСТВАНЕ
9.1. Функционални тестове
Тест 1: Добавяне на книга

Очакван резултат: Книга се добавя успешно

Тест 2: Заемане на книга

Очакван резултат: Статусът се променя на "Заета"

Тест 3: Търсене

Очакван резултат: Филтрират се съответните записи

Тест 4: Защита от дублиране

Очакван резултат: Грешка при дублиращ ID

9.2. Тестови данни
javascript// Примерна книга
{
  id: "001",
  author: "Иван Вазов",
  title: "Под игото",
  publisher: "Хеликон",
  year: 2020,
  available: true,
  borrowedBy: null
}

// Примерен читател
{
  id: "R001",
  firstName: "Георги",
  lastName: "Иванов",
  grade: 10,
  class: "А"
}

10. ЗАКЛЮЧЕНИЕ
Информационната система за библиотечен каталог представлява модерно, ефективно и лесно за използване решение за управление на училищна библиотека. Системата е изградена с чисти технологии (HTML, CSS, JavaScript) без нужда от външни библиотеки или сървърна инфраструктура, което я прави лесна за внедряване и поддръжка.
Интуитивният интерфейс и автоматизираните процеси значително улесняват работата на библиотекарите и подобряват обслужването на учениците.
